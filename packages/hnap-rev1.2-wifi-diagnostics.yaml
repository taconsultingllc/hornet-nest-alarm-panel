sensor:
  # Expose the Board Uptime to HA
  - platform: uptime
    name: Uptime
    id: uptime_sensor
    entity_category: diagnostic

  - platform: wifi_signal
    name: WiFi Signal
    id: wifi_signal_db
    entity_category: diagnostic

  - platform: copy
    source_id: wifi_signal_db
    id: wifi_signal_pct
    name: WiFi Signal %
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: diagnostic

text_sensor:
  - platform: wifi_info
    ip_address:
      name: WiFi IP Address
      entity_category: diagnostic
      
binary_sensor:
  # Start +12V Fuse Monitoring - On Fuse Blown, Enable Piezo Buzzer
  - platform: gpio
    id: Fuse12V
    name: 12V Fuse Status
    icon: mdi:fuse
    pin:
      number: GPIO34
      mode:
        input: true
        pullup: false
      inverted: false
    device_class: problem
    on_state:
      if:
        condition:
        - binary_sensor.is_on: Fuse12V
        then:
        - switch.turn_on: buzzer
        else:
        - switch.turn_off: buzzer
    filters:
        - delayed_on_off: $sensor_debounce_time

  # Start +3.3V Fuse Monitoring - On Fuse Blown, Enable Piezo Buzzer
  - platform: gpio
    id: Fuse3V
    name: 3.3V Fuse Status
    icon: mdi:fuse
    pin:
      number: GPIO36
      mode:
        input: true
        pullup: false
      inverted: true
    device_class: problem
    on_state:
      if:
        condition:
        - binary_sensor.is_on: Fuse3V
        then:
        - switch.turn_on: buzzer
        else:
        - switch.turn_off: buzzer
    filters:
        - delayed_on_off: $sensor_debounce_time

switch:
  # This action will cause the board to reboot
  - platform: restart
    name: "Reboot Alarm Panel"

# Define Piezo Buzzer as Output for RTTTL
rtttl:
  output: buzzer_output