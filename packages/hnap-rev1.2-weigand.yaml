wiegand:
  - id: mykeypad
    d0: GPIO13
    d1: GPIO18
    on_key:
      - lambda: ESP_LOGI("KEY", "received key %d", x);
    on_tag:
      - lambda: ESP_LOGI("TAG", "received tag %s", x.c_str());
      - homeassistant.tag_scanned: !lambda 'return x.c_str();'
    on_raw:
      - lambda: ESP_LOGI("RAW", "received raw %d bits, value %llx", bits, value);

key_collector:
  - id: pincode_reader
    source_id: mykeypad
    min_length: 2
    max_length: 8
    end_keys: "#"
    end_key_required: true
    back_keys: "*"
    clear_keys: "C"
    allowed_keys: "0123456789"
    timeout: 5s
    on_progress:
      - logger.log:
          format: "input progress: '%s', started by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)" ]
    on_result:
      - logger.log:
          format: "input result: '%s', started by '%c', ended by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)", "(end == 0 ? '~' : end)" ]
      - if:
          condition:
            lambda: |-
              return x=="111";
          then:
            switch.turn_on: reader01

      - if:
          condition:
            lambda: |-
              return x=="110";
          then:
            switch.turn_off: reader01

      - if:
          condition:
            lambda: |-
              return x=="121";
          then:
            switch.toggle: reader02

    on_timeout:
      - logger.log:
          format: "input timeout: '%s', started by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)" ]

switch:
 - platform: template
   name: reader01
   id: reader01
   optimistic: true
   lambda: return id(reader01).state;
 - platform: template
   name: reader02
   id: reader02
   optimistic: true
   lambda: return id(reader02).state;